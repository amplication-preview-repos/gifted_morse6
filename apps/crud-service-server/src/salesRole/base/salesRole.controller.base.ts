/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SalesRoleService } from "../salesRole.service";
import { SalesRoleCreateInput } from "./SalesRoleCreateInput";
import { SalesRole } from "./SalesRole";
import { SalesRoleFindManyArgs } from "./SalesRoleFindManyArgs";
import { SalesRoleWhereUniqueInput } from "./SalesRoleWhereUniqueInput";
import { SalesRoleUpdateInput } from "./SalesRoleUpdateInput";

export class SalesRoleControllerBase {
  constructor(protected readonly service: SalesRoleService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SalesRole })
  async createSalesRole(
    @common.Body() data: SalesRoleCreateInput
  ): Promise<SalesRole> {
    return await this.service.createSalesRole({
      data: data,
      select: {
        changeOrderStatus: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SalesRole] })
  @ApiNestedQuery(SalesRoleFindManyArgs)
  async salesRoles(@common.Req() request: Request): Promise<SalesRole[]> {
    const args = plainToClass(SalesRoleFindManyArgs, request.query);
    return this.service.salesRoles({
      ...args,
      select: {
        changeOrderStatus: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SalesRole })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async salesRole(
    @common.Param() params: SalesRoleWhereUniqueInput
  ): Promise<SalesRole | null> {
    const result = await this.service.salesRole({
      where: params,
      select: {
        changeOrderStatus: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SalesRole })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSalesRole(
    @common.Param() params: SalesRoleWhereUniqueInput,
    @common.Body() data: SalesRoleUpdateInput
  ): Promise<SalesRole | null> {
    try {
      return await this.service.updateSalesRole({
        where: params,
        data: data,
        select: {
          changeOrderStatus: true,
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SalesRole })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSalesRole(
    @common.Param() params: SalesRoleWhereUniqueInput
  ): Promise<SalesRole | null> {
    try {
      return await this.service.deleteSalesRole({
        where: params,
        select: {
          changeOrderStatus: true,
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
