/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SalesRole } from "./SalesRole";
import { SalesRoleCountArgs } from "./SalesRoleCountArgs";
import { SalesRoleFindManyArgs } from "./SalesRoleFindManyArgs";
import { SalesRoleFindUniqueArgs } from "./SalesRoleFindUniqueArgs";
import { CreateSalesRoleArgs } from "./CreateSalesRoleArgs";
import { UpdateSalesRoleArgs } from "./UpdateSalesRoleArgs";
import { DeleteSalesRoleArgs } from "./DeleteSalesRoleArgs";
import { SalesRoleService } from "../salesRole.service";
@graphql.Resolver(() => SalesRole)
export class SalesRoleResolverBase {
  constructor(protected readonly service: SalesRoleService) {}

  async _salesRolesMeta(
    @graphql.Args() args: SalesRoleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SalesRole])
  async salesRoles(
    @graphql.Args() args: SalesRoleFindManyArgs
  ): Promise<SalesRole[]> {
    return this.service.salesRoles(args);
  }

  @graphql.Query(() => SalesRole, { nullable: true })
  async salesRole(
    @graphql.Args() args: SalesRoleFindUniqueArgs
  ): Promise<SalesRole | null> {
    const result = await this.service.salesRole(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SalesRole)
  async createSalesRole(
    @graphql.Args() args: CreateSalesRoleArgs
  ): Promise<SalesRole> {
    return await this.service.createSalesRole({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => SalesRole)
  async updateSalesRole(
    @graphql.Args() args: UpdateSalesRoleArgs
  ): Promise<SalesRole | null> {
    try {
      return await this.service.updateSalesRole({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SalesRole)
  async deleteSalesRole(
    @graphql.Args() args: DeleteSalesRoleArgs
  ): Promise<SalesRole | null> {
    try {
      return await this.service.deleteSalesRole(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
