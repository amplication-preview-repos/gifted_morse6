/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { VisitService } from "../visit.service";
import { VisitCreateInput } from "./VisitCreateInput";
import { Visit } from "./Visit";
import { VisitFindManyArgs } from "./VisitFindManyArgs";
import { VisitWhereUniqueInput } from "./VisitWhereUniqueInput";
import { VisitUpdateInput } from "./VisitUpdateInput";
import { SampleFindManyArgs } from "../../sample/base/SampleFindManyArgs";
import { Sample } from "../../sample/base/Sample";
import { SampleWhereUniqueInput } from "../../sample/base/SampleWhereUniqueInput";

export class VisitControllerBase {
  constructor(protected readonly service: VisitService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Visit })
  async createVisit(@common.Body() data: VisitCreateInput): Promise<Visit> {
    return await this.service.createVisit({
      data: {
        ...data,

        store: data.store
          ? {
              connect: data.store,
            }
          : undefined,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        idKunjungan: true,
        idToko: true,
        idUser: true,

        store: {
          select: {
            id: true,
          },
        },

        tanggalKunjungan: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },

        waktuMulai: true,
        waktuSelesai: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Visit] })
  @ApiNestedQuery(VisitFindManyArgs)
  async visits(@common.Req() request: Request): Promise<Visit[]> {
    const args = plainToClass(VisitFindManyArgs, request.query);
    return this.service.visits({
      ...args,
      select: {
        createdAt: true,
        id: true,
        idKunjungan: true,
        idToko: true,
        idUser: true,

        store: {
          select: {
            id: true,
          },
        },

        tanggalKunjungan: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },

        waktuMulai: true,
        waktuSelesai: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Visit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async visit(
    @common.Param() params: VisitWhereUniqueInput
  ): Promise<Visit | null> {
    const result = await this.service.visit({
      where: params,
      select: {
        createdAt: true,
        id: true,
        idKunjungan: true,
        idToko: true,
        idUser: true,

        store: {
          select: {
            id: true,
          },
        },

        tanggalKunjungan: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },

        waktuMulai: true,
        waktuSelesai: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Visit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateVisit(
    @common.Param() params: VisitWhereUniqueInput,
    @common.Body() data: VisitUpdateInput
  ): Promise<Visit | null> {
    try {
      return await this.service.updateVisit({
        where: params,
        data: {
          ...data,

          store: data.store
            ? {
                connect: data.store,
              }
            : undefined,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          idKunjungan: true,
          idToko: true,
          idUser: true,

          store: {
            select: {
              id: true,
            },
          },

          tanggalKunjungan: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },

          waktuMulai: true,
          waktuSelesai: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Visit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteVisit(
    @common.Param() params: VisitWhereUniqueInput
  ): Promise<Visit | null> {
    try {
      return await this.service.deleteVisit({
        where: params,
        select: {
          createdAt: true,
          id: true,
          idKunjungan: true,
          idToko: true,
          idUser: true,

          store: {
            select: {
              id: true,
            },
          },

          tanggalKunjungan: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },

          waktuMulai: true,
          waktuSelesai: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/samples")
  @ApiNestedQuery(SampleFindManyArgs)
  async findSamples(
    @common.Req() request: Request,
    @common.Param() params: VisitWhereUniqueInput
  ): Promise<Sample[]> {
    const query = plainToClass(SampleFindManyArgs, request.query);
    const results = await this.service.findSamples(params.id, {
      ...query,
      select: {
        createdAt: true,
        deskripsi: true,
        id: true,
        idKunjungan: true,
        idSample: true,
        namaSample: true,
        updatedAt: true,

        visit: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/samples")
  async connectSamples(
    @common.Param() params: VisitWhereUniqueInput,
    @common.Body() body: SampleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      samples: {
        connect: body,
      },
    };
    await this.service.updateVisit({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/samples")
  async updateSamples(
    @common.Param() params: VisitWhereUniqueInput,
    @common.Body() body: SampleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      samples: {
        set: body,
      },
    };
    await this.service.updateVisit({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/samples")
  async disconnectSamples(
    @common.Param() params: VisitWhereUniqueInput,
    @common.Body() body: SampleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      samples: {
        disconnect: body,
      },
    };
    await this.service.updateVisit({
      where: params,
      data,
      select: { id: true },
    });
  }
}
