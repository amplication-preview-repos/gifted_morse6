/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CustomerServiceRole } from "./CustomerServiceRole";
import { CustomerServiceRoleCountArgs } from "./CustomerServiceRoleCountArgs";
import { CustomerServiceRoleFindManyArgs } from "./CustomerServiceRoleFindManyArgs";
import { CustomerServiceRoleFindUniqueArgs } from "./CustomerServiceRoleFindUniqueArgs";
import { CreateCustomerServiceRoleArgs } from "./CreateCustomerServiceRoleArgs";
import { UpdateCustomerServiceRoleArgs } from "./UpdateCustomerServiceRoleArgs";
import { DeleteCustomerServiceRoleArgs } from "./DeleteCustomerServiceRoleArgs";
import { CustomerServiceRoleService } from "../customerServiceRole.service";
@graphql.Resolver(() => CustomerServiceRole)
export class CustomerServiceRoleResolverBase {
  constructor(protected readonly service: CustomerServiceRoleService) {}

  async _customerServiceRolesMeta(
    @graphql.Args() args: CustomerServiceRoleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CustomerServiceRole])
  async customerServiceRoles(
    @graphql.Args() args: CustomerServiceRoleFindManyArgs
  ): Promise<CustomerServiceRole[]> {
    return this.service.customerServiceRoles(args);
  }

  @graphql.Query(() => CustomerServiceRole, { nullable: true })
  async customerServiceRole(
    @graphql.Args() args: CustomerServiceRoleFindUniqueArgs
  ): Promise<CustomerServiceRole | null> {
    const result = await this.service.customerServiceRole(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CustomerServiceRole)
  async createCustomerServiceRole(
    @graphql.Args() args: CreateCustomerServiceRoleArgs
  ): Promise<CustomerServiceRole> {
    return await this.service.createCustomerServiceRole({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CustomerServiceRole)
  async updateCustomerServiceRole(
    @graphql.Args() args: UpdateCustomerServiceRoleArgs
  ): Promise<CustomerServiceRole | null> {
    try {
      return await this.service.updateCustomerServiceRole({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CustomerServiceRole)
  async deleteCustomerServiceRole(
    @graphql.Args() args: DeleteCustomerServiceRoleArgs
  ): Promise<CustomerServiceRole | null> {
    try {
      return await this.service.deleteCustomerServiceRole(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
