/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CustomerServiceRoleService } from "../customerServiceRole.service";
import { CustomerServiceRoleCreateInput } from "./CustomerServiceRoleCreateInput";
import { CustomerServiceRole } from "./CustomerServiceRole";
import { CustomerServiceRoleFindManyArgs } from "./CustomerServiceRoleFindManyArgs";
import { CustomerServiceRoleWhereUniqueInput } from "./CustomerServiceRoleWhereUniqueInput";
import { CustomerServiceRoleUpdateInput } from "./CustomerServiceRoleUpdateInput";

export class CustomerServiceRoleControllerBase {
  constructor(protected readonly service: CustomerServiceRoleService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CustomerServiceRole })
  async createCustomerServiceRole(
    @common.Body() data: CustomerServiceRoleCreateInput
  ): Promise<CustomerServiceRole> {
    return await this.service.createCustomerServiceRole({
      data: data,
      select: {
        changeOrderStatus: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CustomerServiceRole] })
  @ApiNestedQuery(CustomerServiceRoleFindManyArgs)
  async customerServiceRoles(
    @common.Req() request: Request
  ): Promise<CustomerServiceRole[]> {
    const args = plainToClass(CustomerServiceRoleFindManyArgs, request.query);
    return this.service.customerServiceRoles({
      ...args,
      select: {
        changeOrderStatus: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CustomerServiceRole })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async customerServiceRole(
    @common.Param() params: CustomerServiceRoleWhereUniqueInput
  ): Promise<CustomerServiceRole | null> {
    const result = await this.service.customerServiceRole({
      where: params,
      select: {
        changeOrderStatus: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CustomerServiceRole })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCustomerServiceRole(
    @common.Param() params: CustomerServiceRoleWhereUniqueInput,
    @common.Body() data: CustomerServiceRoleUpdateInput
  ): Promise<CustomerServiceRole | null> {
    try {
      return await this.service.updateCustomerServiceRole({
        where: params,
        data: data,
        select: {
          changeOrderStatus: true,
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CustomerServiceRole })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCustomerServiceRole(
    @common.Param() params: CustomerServiceRoleWhereUniqueInput
  ): Promise<CustomerServiceRole | null> {
    try {
      return await this.service.deleteCustomerServiceRole({
        where: params,
        select: {
          changeOrderStatus: true,
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
