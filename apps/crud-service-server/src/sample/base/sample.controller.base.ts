/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SampleService } from "../sample.service";
import { SampleCreateInput } from "./SampleCreateInput";
import { Sample } from "./Sample";
import { SampleFindManyArgs } from "./SampleFindManyArgs";
import { SampleWhereUniqueInput } from "./SampleWhereUniqueInput";
import { SampleUpdateInput } from "./SampleUpdateInput";

export class SampleControllerBase {
  constructor(protected readonly service: SampleService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Sample })
  async createSample(@common.Body() data: SampleCreateInput): Promise<Sample> {
    return await this.service.createSample({
      data: {
        ...data,

        visit: data.visit
          ? {
              connect: data.visit,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        deskripsi: true,
        id: true,
        idKunjungan: true,
        idSample: true,
        namaSample: true,
        updatedAt: true,

        visit: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Sample] })
  @ApiNestedQuery(SampleFindManyArgs)
  async samples(@common.Req() request: Request): Promise<Sample[]> {
    const args = plainToClass(SampleFindManyArgs, request.query);
    return this.service.samples({
      ...args,
      select: {
        createdAt: true,
        deskripsi: true,
        id: true,
        idKunjungan: true,
        idSample: true,
        namaSample: true,
        updatedAt: true,

        visit: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Sample })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async sample(
    @common.Param() params: SampleWhereUniqueInput
  ): Promise<Sample | null> {
    const result = await this.service.sample({
      where: params,
      select: {
        createdAt: true,
        deskripsi: true,
        id: true,
        idKunjungan: true,
        idSample: true,
        namaSample: true,
        updatedAt: true,

        visit: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Sample })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSample(
    @common.Param() params: SampleWhereUniqueInput,
    @common.Body() data: SampleUpdateInput
  ): Promise<Sample | null> {
    try {
      return await this.service.updateSample({
        where: params,
        data: {
          ...data,

          visit: data.visit
            ? {
                connect: data.visit,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          deskripsi: true,
          id: true,
          idKunjungan: true,
          idSample: true,
          namaSample: true,
          updatedAt: true,

          visit: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Sample })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSample(
    @common.Param() params: SampleWhereUniqueInput
  ): Promise<Sample | null> {
    try {
      return await this.service.deleteSample({
        where: params,
        select: {
          createdAt: true,
          deskripsi: true,
          id: true,
          idKunjungan: true,
          idSample: true,
          namaSample: true,
          updatedAt: true,

          visit: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
