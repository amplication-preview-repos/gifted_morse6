/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Sample as PrismaSample,
  Visit as PrismaVisit,
} from "@prisma/client";

export class SampleServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SampleCountArgs, "select">): Promise<number> {
    return this.prisma.sample.count(args);
  }

  async samples(args: Prisma.SampleFindManyArgs): Promise<PrismaSample[]> {
    return this.prisma.sample.findMany(args);
  }
  async sample(
    args: Prisma.SampleFindUniqueArgs
  ): Promise<PrismaSample | null> {
    return this.prisma.sample.findUnique(args);
  }
  async createSample(args: Prisma.SampleCreateArgs): Promise<PrismaSample> {
    return this.prisma.sample.create(args);
  }
  async updateSample(args: Prisma.SampleUpdateArgs): Promise<PrismaSample> {
    return this.prisma.sample.update(args);
  }
  async deleteSample(args: Prisma.SampleDeleteArgs): Promise<PrismaSample> {
    return this.prisma.sample.delete(args);
  }

  async getVisit(parentId: string): Promise<PrismaVisit | null> {
    return this.prisma.sample
      .findUnique({
        where: { id: parentId },
      })
      .visit();
  }
}
